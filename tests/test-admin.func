;;#include "codes.func";
#include "init-data.func";

int __test_change_admin(){
    init_data::set_default_initial_data();

    cell owner_address = begin_cell()
            .store_uint(1, 2)
            .store_uint(5, 9) 
            .store_uint(7, 5)
    .end_cell();

    cell test_admin = begin_cell()
            .store_uint(1, 2)
            .store_uint(5, 9) 
            .store_uint(1, 5)
    .end_cell();

    cell message_body = begin_cell()     
        .store_uint(admin_op::change_admin(), 32)
        .store_uint(1, 64)
        .store_slice(test_admin.begin_parse())      
    .end_cell();


    slice msg_mody = message_body.begin_parse();
    cell message = begin_cell()
        .store_uint(0x6, 4)
        .store_slice(owner_address.begin_parse()) 
        .store_slice(owner_address.begin_parse()) 
        .store_grams(100)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(message_body)
        .store_slice(msg_mody)
    .end_cell();

    var (int gas_used1, _) = invoke_method(recv_internal, [0, 100, message, msg_mody]);
    var (_, stack) = invoke_method(get_owner_address, []);
    [slice address] = stack;
    throw_unless(1, equal_slices((test_admin.begin_parse()), address));
    return gas_used1;
}

int __test_change_wallet_x(){
    init_data::set_default_initial_data();

    cell owner_address = begin_cell()
            .store_uint(1, 2)
            .store_uint(5, 9) 
            .store_uint(7, 5)
    .end_cell();

    cell test_admin = begin_cell()
            .store_uint(1, 2)
            .store_uint(5, 9) 
            .store_uint(1, 5)
    .end_cell();

    cell message_body = begin_cell()     
        .store_uint(admin_op::change_wallet_x(), 32)
        .store_uint(1, 64)
        .store_slice(test_admin.begin_parse())      
    .end_cell();


    slice msg_mody = message_body.begin_parse();
    cell message = begin_cell()
        .store_uint(0x6, 4)
        .store_slice(owner_address.begin_parse()) 
        .store_slice(owner_address.begin_parse()) 
        .store_grams(100)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(message_body)
        .store_slice(msg_mody)
    .end_cell();

    var (int gas_used1, _) = invoke_method(recv_internal, [0, 100, message, msg_mody]);
    var (_, stack) = invoke_method(get_otoken_x_jetton_address, []);
    [slice address] = stack;
    throw_unless(1, equal_slices((test_admin.begin_parse()), address));
    return gas_used1;
}

int __test_change_minter(){
    init_data::set_default_initial_data();

    cell owner_address = begin_cell()
            .store_uint(1, 2)
            .store_uint(5, 9) 
            .store_uint(7, 5)
    .end_cell();

    cell test_admin = begin_cell()
            .store_uint(1, 2)
            .store_uint(5, 9) 
            .store_uint(1, 5)
    .end_cell();

    cell message_body = begin_cell()     
        .store_uint(admin_op::change_minter(), 32)
        .store_uint(1, 64)
        .store_slice(test_admin.begin_parse())      
    .end_cell();


    slice msg_mody = message_body.begin_parse();
    cell message = begin_cell()
        .store_uint(0x6, 4)
        .store_slice(owner_address.begin_parse()) 
        .store_slice(owner_address.begin_parse()) 
        .store_grams(100)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(message_body)
        .store_slice(msg_mody)
    .end_cell();

    var (int gas_used1, _) = invoke_method(recv_internal, [0, 100, message, msg_mody]);
    var (_, stack) = invoke_method(get_otoken_minter_address, []);
    [slice address] = stack;
    throw_unless(1, equal_slices((test_admin.begin_parse()), address));
    return gas_used1;
}

int __test_change_wallet_o(){
    init_data::set_default_initial_data();

    cell owner_address = begin_cell()
            .store_uint(1, 2)
            .store_uint(5, 9) 
            .store_uint(7, 5)
    .end_cell();

    cell test_admin = begin_cell()
            .store_uint(1, 2)
            .store_uint(5, 9) 
            .store_uint(1, 5)
    .end_cell();

    cell message_body = begin_cell()     
        .store_uint(admin_op::change_wallet_o(), 32)
        .store_uint(1, 64)
        .store_slice(test_admin.begin_parse())      
    .end_cell();


    slice msg_mody = message_body.begin_parse();
    cell message = begin_cell()
        .store_uint(0x6, 4)
        .store_slice(owner_address.begin_parse()) 
        .store_slice(owner_address.begin_parse()) 
        .store_grams(100)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(message_body)
        .store_slice(msg_mody)
    .end_cell();

    var (int gas_used1, _) = invoke_method(recv_internal, [0, 100, message, msg_mody]);
    var (_, stack) = invoke_method(get_otoken_jetton_address, []);
    [slice address] = stack;
    throw_unless(1, equal_slices((test_admin.begin_parse()), address));
    return gas_used1;
}