{
  "stats": {
    "suites": 1,
    "tests": 34,
    "passes": 34,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-26T09:47:10.887Z",
    "end": "2023-02-26T09:47:12.933Z",
    "duration": 2046,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c5a5926b-f343-4bd3-81d7-eb4969874e96",
      "title": "",
      "fullFile": "/Users/knstntn.asuoki/Documents/blockchain/onda/tests/transaction.ts",
      "file": "/tests/transaction.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fce976d7-12cf-4c89-9d4f-53350046eebe",
          "title": "onda-stablepool main tests",
          "fullFile": "/Users/knstntn.asuoki/Documents/blockchain/onda/tests/transaction.ts",
          "file": "/tests/transaction.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"onda-stablepool main tests\"",
              "fullTitle": "onda-stablepool main tests \"before each\" hook in \"onda-stablepool main tests\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ondaCode = ton_core_1.Cell.fromBoc(fs.readFileSync(\"./output/onda.cell\"))[0]; // compilation output from tutorial 2\nconst onda = contract_1.default.createForDeploy(ondaCode, jetton_wallet_x_address.address, minter_otoken_address.address, jetton_wallet_otoken_address.address, oracle.address, owner_address.address, configuration);\nondaContract = blockchain.openContract(onda);\nawait ondaContract.sendDeploy(deployer.getSender());",
              "err": {},
              "uuid": "29e17398-5d25-4870-8317-984ef772bd6d",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "onda-stablepool newLendNativeToken",
              "fullTitle": "onda-stablepool main tests onda-stablepool newLendNativeToken",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a1, 32)\n    .storeUint(0, 64)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(user.address, 10 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "4d209705-0a10-40fb-a820-9bf21eaf0643",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check lend info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check lend info",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await ondaContract.getLendInfo(user.address);\nvar res = await ondaContract.parseLendSlice(data);\n//console.log(res);",
              "err": {},
              "uuid": "8428cecd-53b7-456a-bcce-e211b5e92b62",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool newBorrow using native token",
              "fullTitle": "onda-stablepool main tests onda-stablepool newBorrow using native token",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a0, 32)\n    .storeUint(0, 64)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(user.address, 1 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "615430c8-61b8-4d4d-9c4c-591db283f0f0",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check borrow info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check borrow info",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await ondaContract.getBorrowInfo(user.address);\nvar res = await ondaContract.parseBorrowSlice(data);\n//console.log(res);",
              "err": {},
              "uuid": "e7d2411e-c334-40a2-ae1a-f04e26e9fa53",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool trying withdraw when borrow not end",
              "fullTitle": "onda-stablepool main tests onda-stablepool trying withdraw when borrow not end",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x7362d09c, 32)\n    .storeUint(0x15f90, 64)\n    .storeCoins(10000000000)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(jetton_wallet_otoken_address.address, 1 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(7006);\n(0, chai_1.expect)(res.aborted).to.equal(true);",
              "err": {},
              "uuid": "f760a449-f34c-4403-a044-96fa87ef7d8a",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool trying newLendNativeToken when user alredy lend",
              "fullTitle": "onda-stablepool main tests onda-stablepool trying newLendNativeToken when user alredy lend",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a1, 32)\n    .storeUint(0, 64)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(user.address, 10 * 10 ** 9, 2.40 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(83);\n(0, chai_1.expect)(res.aborted).to.equal(true);",
              "err": {},
              "uuid": "d6ec493a-f5b6-4e9e-a5ba-d4371728b7ac",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool deleteBorrowCustomToken when hf < 100",
              "fullTitle": "onda-stablepool main tests onda-stablepool deleteBorrowCustomToken when hf < 100",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x7362d09c, 32)\n    .storeUint(0x1adb0, 64)\n    .storeCoins(18375000000)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(jetton_wallet_x_address.address, 1 * 10 ** 9, 1.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(585);\n(0, chai_1.expect)(res.aborted).to.equal(true);",
              "err": {},
              "uuid": "6ea5aaeb-8fd1-4f30-a107-2e983bb6e3f7",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check borrow info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check borrow info",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await ondaContract.getBorrowInfo(user.address);\nvar res = await ondaContract.parseBorrowSlice(data);\n(0, chai_1.expect)(res.typeBorrowAmount).to.equal(1);\n(0, chai_1.expect)(res.borrowValue).to.equal(18375000000n);",
              "err": {},
              "uuid": "963ad071-6963-4251-aa74-e74c1dbe499d",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool deleteBorrowCustomToken when hf > 100",
              "fullTitle": "onda-stablepool main tests onda-stablepool deleteBorrowCustomToken when hf > 100",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x7362d09c, 32)\n    .storeUint(0x1adb0, 64)\n    .storeCoins(18375001891)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(jetton_wallet_x_address.address, 1 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "3d4d4177-6452-47ba-b0d6-c808af4a0eb2",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check lend info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check lend info",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await ondaContract.getLendInfo(user.address);\nvar res = await ondaContract.parseLendSlice(data);\n(0, chai_1.expect)(res.typeLendAmount).to.equal(2);\n(0, chai_1.expect)(res.status).to.equal(1);\n(0, chai_1.expect)(res.lendValue).to.equal(10000000000n);",
              "err": {},
              "uuid": "cbb4810b-be68-42d1-ba7e-49e027ecae86",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool withdraw",
              "fullTitle": "onda-stablepool main tests onda-stablepool withdraw",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x7362d09c, 32)\n    .storeUint(0x15f90, 64)\n    .storeCoins(10000000000)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(jetton_wallet_otoken_address.address, 1 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "e35c8e5a-dfe5-489b-b441-5aa06577d55f",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool newLendCustomToken",
              "fullTitle": "onda-stablepool main tests onda-stablepool newLendCustomToken",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x7362d09c, 32)\n    .storeUint(0x15ba8, 64)\n    .storeCoins(10000000000)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(jetton_wallet_x_address.address, 10 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "c992480f-89b1-4061-a89d-b21cb2fb29d3",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check lend info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check lend info",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await ondaContract.getLendInfo(user.address);\nvar res = await ondaContract.parseLendSlice(data);\n(0, chai_1.expect)(res.typeLendAmount).to.equal(1);\n(0, chai_1.expect)(res.status).to.equal(1);\n(0, chai_1.expect)(res.lendValue).to.equal(10000000000n);",
              "err": {},
              "uuid": "01994695-9470-4a05-927d-e113488cded6",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool newBorrow using custom token",
              "fullTitle": "onda-stablepool main tests onda-stablepool newBorrow using custom token",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a0, 32)\n    .storeUint(0, 64)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(user.address, 1 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "2c92f591-3c2f-43c0-bba5-52a249e57304",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check borrow info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check borrow info",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await ondaContract.getBorrowInfo(user.address);\nvar res = await ondaContract.parseBorrowSlice(data);\n(0, chai_1.expect)(res.typeBorrowAmount).to.equal(2);\n(0, chai_1.expect)(res.borrowValue).to.equal(3061224489n);",
              "err": {},
              "uuid": "040c12f3-1001-433f-b5e3-e1a02a9b0dca",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool liquidationCallNativeToken when hf > 100",
              "fullTitle": "onda-stablepool main tests onda-stablepool liquidationCallNativeToken when hf > 100",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a3, 32)\n    .storeUint(0, 64)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(liquidator.address, 1530612244, 1.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(585);\n(0, chai_1.expect)(res.aborted).to.equal(true);",
              "err": {},
              "uuid": "347f26f8-8a2d-415e-bbf8-93c3592ac63f",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool liquidationCallNativeToken when hf < 100",
              "fullTitle": "onda-stablepool main tests onda-stablepool liquidationCallNativeToken when hf < 100",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a3, 32)\n    .storeUint(0, 64)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(liquidator.address, 1530612244, 3.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "1ebac505-cf2c-4923-a210-2799ef0a58e8",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check lend info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check lend info",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data = await ondaContract.getLendInfo(user.address);\nvar res = await ondaContract.parseLendSlice(data);\n(0, chai_1.expect)(res.typeLendAmount).to.equal(0);\n(0, chai_1.expect)(res.status).to.equal(0);\n(0, chai_1.expect)(res.lendValue).to.equal(0n);",
              "err": {},
              "uuid": "e839110a-9166-4274-8c81-474cfe2846d2",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check borrow info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check borrow info",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data = await ondaContract.getBorrowInfo(user.address);\nvar res = await ondaContract.parseBorrowSlice(data);\n(0, chai_1.expect)(res.typeBorrowAmount).to.equal(0);\n(0, chai_1.expect)(res.borrowValue).to.equal(0n);",
              "err": {},
              "uuid": "448c7a9c-d02d-4d69-a35c-69df125ac052",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool newLendNativeToken",
              "fullTitle": "onda-stablepool main tests onda-stablepool newLendNativeToken",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a1, 32)\n    .storeUint(0, 64)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(user.address, 10 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "5468fb6c-399b-4222-a893-acf86a410720",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool newBorrow using native token",
              "fullTitle": "onda-stablepool main tests onda-stablepool newBorrow using native token",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a0, 32)\n    .storeUint(0, 64)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(user.address, 1 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "2bb323ab-a020-4e04-9f6e-6d85235ddb50",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check borrow info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check borrow info",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await ondaContract.getBorrowInfo(user.address);\nvar res = await ondaContract.parseBorrowSlice(data);\n//console.log(res);",
              "err": {},
              "uuid": "cf7e679a-e9ac-4c1d-b74d-707fb199df92",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool liquidationCallCustomToken when hf > 100",
              "fullTitle": "onda-stablepool main tests onda-stablepool liquidationCallCustomToken when hf > 100",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x7362d09c, 32)\n    .storeUint(0x1abb0, 64)\n    .storeCoins(1530612244)\n    .storeAddress(liquidator.address)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(jetton_wallet_x_address.address, 1 * 10 ** 9, 3.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(585);\n(0, chai_1.expect)(res.aborted).to.equal(true);",
              "err": {},
              "uuid": "9db94c70-c5f2-4d18-ae78-4bf4d495508c",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool liquidationCallCustomToken when hf < 100",
              "fullTitle": "onda-stablepool main tests onda-stablepool liquidationCallCustomToken when hf < 100",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x7362d09c, 32)\n    .storeUint(0x1abb0, 64)\n    .storeCoins(9187500000)\n    .storeAddress(liquidator.address)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(jetton_wallet_x_address.address, 1 * 10 ** 9, 1.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "d80afcae-6798-4548-b4f6-a343a93fa18c",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check lend info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check lend info",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data = await ondaContract.getLendInfo(user.address);\nvar res = await ondaContract.parseLendSlice(data);\n(0, chai_1.expect)(res.typeLendAmount).to.equal(0);\n(0, chai_1.expect)(res.status).to.equal(0);\n(0, chai_1.expect)(res.lendValue).to.equal(0n);",
              "err": {},
              "uuid": "32e53566-ec4b-4dcf-92e5-55d15a1e5dc6",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check borrow info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check borrow info",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data = await ondaContract.getBorrowInfo(user.address);\nvar res = await ondaContract.parseBorrowSlice(data);\n(0, chai_1.expect)(res.typeBorrowAmount).to.equal(0);\n(0, chai_1.expect)(res.borrowValue).to.equal(0n);",
              "err": {},
              "uuid": "3a5ae3aa-537b-421d-aa02-2dbb84837fac",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool newLendCustomToken",
              "fullTitle": "onda-stablepool main tests onda-stablepool newLendCustomToken",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x7362d09c, 32)\n    .storeUint(0x15ba8, 64)\n    .storeCoins(10000000000)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(jetton_wallet_x_address.address, 10 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "701295da-629a-46d3-a88b-dc0b0dd6c0b4",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check lend info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check lend info",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await ondaContract.getLendInfo(user.address);\nvar res = await ondaContract.parseLendSlice(data);\n(0, chai_1.expect)(res.typeLendAmount).to.equal(1);\n(0, chai_1.expect)(res.status).to.equal(1);\n(0, chai_1.expect)(res.lendValue).to.equal(10000000000n);",
              "err": {},
              "uuid": "76831c78-d7e1-489f-9bfb-6ad8023459d6",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool newBorrow using custom token",
              "fullTitle": "onda-stablepool main tests onda-stablepool newBorrow using custom token",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a0, 32)\n    .storeUint(0, 64)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(user.address, 1 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "80602b76-251d-48db-9e1b-72e36753f380",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check borrow info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check borrow info",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data = await ondaContract.getBorrowInfo(user.address);\nvar res = await ondaContract.parseBorrowSlice(data);\n//console.log(res)",
              "err": {},
              "uuid": "2ccb9d88-04ed-46de-9010-b54a77267157",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool deleteBorrowNativeToken when hf < 100",
              "fullTitle": "onda-stablepool main tests onda-stablepool deleteBorrowNativeToken when hf < 100",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a2, 32)\n    .storeUint(0, 64)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(user.address, 3061224489, 3.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(585);\n(0, chai_1.expect)(res.aborted).to.equal(true);",
              "err": {},
              "uuid": "cccb1ed4-4a23-4c9e-9cb9-e13a02b83d83",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool deleteBorrowNativeToken when hf > 100",
              "fullTitle": "onda-stablepool main tests onda-stablepool deleteBorrowNativeToken when hf > 100",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x186a2, 32)\n    .storeUint(0, 64)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(user.address, 3061224799, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "c430059d-fc24-409a-8664-ceecd91f6948",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool check lend info",
              "fullTitle": "onda-stablepool main tests onda-stablepool check lend info",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await ondaContract.getLendInfo(user.address);\nvar res = await ondaContract.parseLendSlice(data);\n(0, chai_1.expect)(res.typeLendAmount).to.equal(1);\n(0, chai_1.expect)(res.status).to.equal(1);\n(0, chai_1.expect)(res.lendValue).to.equal(10000000000n);",
              "err": {},
              "uuid": "3340709a-a727-493e-bed4-e53cee7acf4a",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "onda-stablepool withdraw",
              "fullTitle": "onda-stablepool main tests onda-stablepool withdraw",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const origBody = (0, ton_core_1.beginCell)()\n    .storeUint(0x7362d09c, 32)\n    .storeUint(0x15f90, 64)\n    .storeCoins(10000000000)\n    .storeAddress(user.address)\n    .endCell();\nvar body = await (0, helper_1.packOracleResponse)(jetton_wallet_otoken_address.address, 1 * 10 ** 9, 2.45 * 10 ** 9, origBody);\nvar result = await ondaContract.sendAction(oracle.getSender(), body);\nvar res = (0, transaction_1.flattenTransaction)(result.transactions[1]);\n(0, chai_1.expect)(res.exitCode).to.equal(0);\n(0, chai_1.expect)(res.aborted).to.equal(false);",
              "err": {},
              "uuid": "8932a31f-e113-4f8a-b5f8-963427ca1602",
              "parentUUID": "fce976d7-12cf-4c89-9d4f-53350046eebe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d209705-0a10-40fb-a820-9bf21eaf0643",
            "8428cecd-53b7-456a-bcce-e211b5e92b62",
            "615430c8-61b8-4d4d-9c4c-591db283f0f0",
            "e7d2411e-c334-40a2-ae1a-f04e26e9fa53",
            "f760a449-f34c-4403-a044-96fa87ef7d8a",
            "d6ec493a-f5b6-4e9e-a5ba-d4371728b7ac",
            "6ea5aaeb-8fd1-4f30-a107-2e983bb6e3f7",
            "963ad071-6963-4251-aa74-e74c1dbe499d",
            "3d4d4177-6452-47ba-b0d6-c808af4a0eb2",
            "cbb4810b-be68-42d1-ba7e-49e027ecae86",
            "e35c8e5a-dfe5-489b-b441-5aa06577d55f",
            "c992480f-89b1-4061-a89d-b21cb2fb29d3",
            "01994695-9470-4a05-927d-e113488cded6",
            "2c92f591-3c2f-43c0-bba5-52a249e57304",
            "040c12f3-1001-433f-b5e3-e1a02a9b0dca",
            "347f26f8-8a2d-415e-bbf8-93c3592ac63f",
            "1ebac505-cf2c-4923-a210-2799ef0a58e8",
            "e839110a-9166-4274-8c81-474cfe2846d2",
            "448c7a9c-d02d-4d69-a35c-69df125ac052",
            "5468fb6c-399b-4222-a893-acf86a410720",
            "2bb323ab-a020-4e04-9f6e-6d85235ddb50",
            "cf7e679a-e9ac-4c1d-b74d-707fb199df92",
            "9db94c70-c5f2-4d18-ae78-4bf4d495508c",
            "d80afcae-6798-4548-b4f6-a343a93fa18c",
            "32e53566-ec4b-4dcf-92e5-55d15a1e5dc6",
            "3a5ae3aa-537b-421d-aa02-2dbb84837fac",
            "701295da-629a-46d3-a88b-dc0b0dd6c0b4",
            "76831c78-d7e1-489f-9bfb-6ad8023459d6",
            "80602b76-251d-48db-9e1b-72e36753f380",
            "2ccb9d88-04ed-46de-9010-b54a77267157",
            "cccb1ed4-4a23-4c9e-9cb9-e13a02b83d83",
            "c430059d-fc24-409a-8664-ceecd91f6948",
            "3340709a-a727-493e-bed4-e53cee7acf4a",
            "8932a31f-e113-4f8a-b5f8-963427ca1602"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1046,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}