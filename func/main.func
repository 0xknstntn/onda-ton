{-
	@title: Onda Lending Core
	@custom: version 1.0
	@author Konstantin Klyuchnikov (knstntn.asuoki.eth)
-}

#include "storage.func";
#include "utils/utils.func";
#include "utils/codes.func";
#include "utils/exitcodes.func";
#include "lib/admin.func";
#include "lib/user-borrow.func";
#include "lib/user-lend-transfer.func";
#include "lib/test-lib.func";
#include "lib/get-methods.func";
;;#include "lib/algebra.func";
#include "lib/tonlink-lib.func";
 
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
	(slice owner_address, slice jetton_wallet_x_address, slice minter_otoken_address, slice jetton_wallet_otoken_address, slice oracle, cell borrow, cell lend, cell algebra) = storage::load_data();
	slice sender_address = utils::parse_sender_address(in_msg_full);
	slice full_nsg = in_msg_body; ;; Save full msg

	{-
		If this message came from an oracle/DON, then in accordance with the message parsing format, 
		we get the original message, the price, the amount of TON and the address of the original sender.
	-}

	if(tonlink::is_oracle?(sender_address, oracle)){
		var (who_send, time, value, price, all_msg) = tonlink::parse_response(slice in_msg_body);
		int op = all_msg~load_uint(32);
		int query_id = all_msg~load_uint(64);

		if (op == op::transfer_notification()) {
			if ((query_id == query::create_lend()) & (equal_slices(who_send, jetton_wallet_x_address))) {
				lend::new_lend(all_msg, sender_address, msg_value, query_id);
				return ();
			}
			if ((query_id == query::delete_lend()) & (equal_slices(who_send, jetton_wallet_otoken_address))) {
				lend::delete_lend(all_msg, who_send, msg_value, query_id);
				return ();
			}
			if ((query_id == query::delete_borrow()) & (equal_slices(who_send, jetton_wallet_x_address))) {
				borrow::delete_borrow(all_msg);
				return ();
			}
			return ();
		}

		if (op == op::new_borrow()) { 
			borrow::new_borrow(all_msg, who_send, value, query_id); 
			return (); 
		}

	} else {
		int op = in_msg_body~load_uint(32);
		int query_id = in_msg_body~load_uint(64);
		if (op == admin_op::change_admin()) { admin::change_admin(in_msg_body, sender_address); return (); }  
		if (op == admin_op::change_wallet_x()) { admin::change_wallet_x(in_msg_body, sender_address); return ();} 
		if (op == admin_op::change_minter()) { admin::change_minter(in_msg_body, sender_address); return ();}
		if (op == admin_op::change_wallet_o()) { admin::change_wallet_o(in_msg_body, sender_address); return ();}
		if (op == test::change_ma() ) { test::change_admin_minter(in_msg_body, sender_address); return ();}
		
		;; Send request to oracle with tonlink-lib
		
		tonlink::send_request(sender_address, msg_value, full_msg, oracle);
		return ();

	}

	throw(0xffff); 
}  
