() lend::newLendCustomToken(slice in_msg_body, slice sender_address) impure {
        (slice owner_address, slice jetton_wallet_x_address, slice minter_otoken_address, slice jetton_wallet_otoken_address, slice oracle, cell borrow, cell lend, cell algebra) = storage::load_data();
        int input_amount = in_msg_body~load_grams();
        slice to_address = in_msg_body~load_msg_addr();
        var (_, key_addr) = parse_std_addr(to_address);
        throw_if(0x53, check_slice_for_empty?(lend.udict_get_maybe_ref(256, key_addr)));

        {- in future -}
        {-if(check_slice_for_empty?(lend.udict_get_maybe_ref(256, key_addr))){
                slice old_cell = (lend.udict_get_maybe_ref(256, key_addr)).begin_parse();
                int old_status = old_cell~load_uint(2);
                old_cell~load_msg_addr();
                old_cell~load_uint(64);
                int old_lend_amount = old_cell~load_grams();
                cell lendCell = begin_cell()
                        .store_uint(1, 2)
                        .store_uint(old_status, 2)
                        .store_slice(to_address)
                        .store_uint(now(), 64)
                        .store_grams(old_lend_amount + input_amount)
                .end_cell();
                lend~udict_set_ref(256, key_addr, lendCell);
        } else { -}

        cell body = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(0, 64)
                .store_grams(input_amount)
                .store_slice(to_address)
                .store_slice(utils::null_addr())
                .store_dict(new_dict())
                .store_grams(0)
        .end_cell();
        throw_unless(701, slice_bits(body.begin_parse()) <= 1023);

        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(jetton_wallet_otoken_address)
                .store_grams(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(body)
                .store_slice(body.begin_parse())
        .end_cell();
        send_raw_message(msg, 64);

        cell lendCell = begin_cell()
                .store_uint(1, 2)
                .store_uint(1, 2)
                .store_slice(to_address)
                .store_uint(now(), 64)
                .store_grams(input_amount)
        .end_cell();
        lend~udict_set_ref(256, key_addr, lendCell);

        storage::save_data(owner_address, jetton_wallet_x_address, minter_otoken_address, jetton_wallet_otoken_address, oracle, borrow, lend, algebra);
        return ();
}

() lend::newLendNativeToken(slice in_msg_body, slice sender_address, int msg_value) impure {
        (slice owner_address, slice jetton_wallet_x_address, slice minter_otoken_address, slice jetton_wallet_otoken_address, slice oracle, cell borrow, cell lend, cell algebra) = storage::load_data();
        var (_, key_addr) = parse_std_addr(sender_address);
        throw_if(0x53, check_slice_for_empty?(lend.udict_get_maybe_ref(256, key_addr)));

        {- in future -}
        {-if(check_slice_for_empty?(lend.udict_get_maybe_ref(256, key_addr))){
                slice old_cell = (lend.udict_get_maybe_ref(256, key_addr)).begin_parse();
                int old_status = old_cell~load_uint(2);
                old_cell~load_msg_addr();
                old_cell~load_uint(64);
                int old_lend_amount = old_cell~load_grams();
                cell lendCell = begin_cell()
                        .store_uint(2, 2)
                        .store_uint(old_status, 2)
                        .store_slice(sender_address)
                        .store_uint(now(), 64)
                        .store_grams(old_lend_amount + msg_value)
                .end_cell();
                lend~udict_set_ref(256, key_addr, lendCell);
        } else { -} 

        cell body = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(0, 64)
                .store_grams(msg_value)
                .store_slice(sender_address)
                .store_slice(utils::null_addr())
                .store_dict(new_dict())
                .store_grams(0)
        .end_cell();

        throw_unless(701, slice_bits(body.begin_parse()) <= 1023);

        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(jetton_wallet_otoken_address)
                .store_grams(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(body)
                .store_slice(body.begin_parse())
        .end_cell();
        send_raw_message(msg, 64);


        cell lendCell = begin_cell()
                .store_uint(2, 2)
                .store_uint(1, 2)
                .store_slice(sender_address)
                .store_uint(now(), 64)
                .store_grams(msg_value)
        .end_cell();
        lend~udict_set_ref(256, key_addr, lendCell);
        storage::save_data(owner_address, jetton_wallet_x_address, minter_otoken_address, jetton_wallet_otoken_address, oracle, borrow, lend, algebra);
        return ();
}

() lend::deleteLend(slice in_msg_body, slice sender_address, int msg_value, int query_id) impure {
        (slice owner_address, slice jetton_wallet_x_address, slice minter_otoken_address, slice jetton_wallet_otoken_address, slice oracle, cell borrow, cell lend, cell algebra) = storage::load_data();
        (int ltv, int liquidationThreshold, int liquidationBonus, int borrowingEnabled, int isActive, int liquidityRate, int variableBorrowRate) = algebra::getConfiguration(algebra);
        int input_amount = in_msg_body~load_grams();
        slice to_address = in_msg_body~load_msg_addr(); 
        var (_, key_addr) = parse_std_addr(to_address);

        slice lendSlice = (lend.udict_get_maybe_ref(256, key_addr)).begin_parse();

       

        int typeLendAmount = lendSlice~load_uint(2);

        int status = lendSlice~load_uint(2);
        throw_unless(err::not_equal(), equal_slices(to_address, lendSlice~load_msg_addr()));
        throw_unless(err::blocked(), status != 2);

        int time = lendSlice~load_uint(64);
        throw_unless(err::wrong_time(), time > 0);

        int lend_amount = lendSlice~load_grams();
        throw_unless(err::wrong_amount(), lend_amount > 0);
        throw_unless(err::wrong_amount(), input_amount == lend_amount);
        int lend_time = (now() - time);

        ;;throw_if(err::small_days(), lend_time <= 3);

        ;;int plus_balance = ((((lend_amount * variableBorrowRate * 100) / 100) * lend_time) / 365) / 100 + lend_amount;
        int depositAPY = algebra::calculateDepositAPY(liquidityRate);
        int plus_balance = lend_amount + ((lend_amount) * (depositAPY) * (lend_time * 1000000000)) / (31536000 * 1000000000);
        throw_if(err::wrong_amount(), plus_balance < lend_amount);

        if(typeLendAmount == 1){
                var body = begin_cell()
                        .store_uint(op::transfer(), 32)
                        .store_uint(0, 64)
                        .store_grams(plus_balance)
                        .store_slice(to_address)
                        .store_slice(utils::null_addr())
                        .store_dict(new_dict())
                        .store_grams(0)
                .end_cell();

                var msg = begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(to_address)
                        .store_grams(0)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .store_ref(body)
                        .store_slice(begin_parse(body))
                .end_cell();

                send_raw_message(msg, 64);
        }
        if(typeLendAmount == 2){
                var msg = begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(jetton_wallet_x_address)
                        .store_grams(plus_balance)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();
                send_raw_message(msg, 3);
        }
        lend~udict_delete?(256, key_addr);

        storage::save_data(owner_address, jetton_wallet_x_address, minter_otoken_address, jetton_wallet_otoken_address, oracle, borrow, lend, algebra);
        return ();

}